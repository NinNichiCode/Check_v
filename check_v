#!/bin/bash

# Author: Nhat Ninh
# Modified date: 21/04/2025
# Description: This script automatically lints Verilog (.v)
              # Highlights critical errors first and suggests fixes for common coding issues
# Usage: check_v

SRC="$1"
LOG_DIR="./verilator_logs"
SUMMARY="./verilator_summary.log"
TMP_ERR_LIST="./verilator_error_files.tmp"


mkdir -p "$LOG_DIR"
> "$SUMMARY"
> "$TMP_ERR_LIST"


if [ -z "$SRC" ]; then
  echo " Vui l√≤ng cung c·∫•p t√™n file .v ho·∫∑c th∆∞ m·ª•c c·∫ßn ki·ªÉm tra!"
  exit 1
fi

echo " Ph√¢n t√≠ch c√∫ ph√°p v√† logic v·ªõi Verilator"
echo "==========================================="


# N·∫øu l√† file .v
if [[ -f "$SRC" && "$SRC" == *.v ]]; then
  base=$(basename "$SRC")
  log_file="$LOG_DIR/${base%.v}.log"


  echo "üìò ƒêang ki·ªÉm tra file: $SRC"
  verilator --lint-only -Wall -Wno-fatal "$SRC" > "$log_file" 2>&1


  # Ki·ªÉm tra l·ªói v·ªÅ timing (Verilator kh√¥ng h·ªó tr·ª£ delay ki·ªÉu #(...))
  if grep -q "Error-NEEDTIMINGOPT" "$log_file"; then
    echo " => B·ªè qua file v√¨ c√≥ delay Verilator kh√¥ng h·ªó tr·ª£ (NEEDTIMINGOPT): $SRC"
    exit 0
  fi


  first_syntax_err=$(grep -m 1 "syntax error" "$log_file")
  if [[ -n "$first_syntax_err" ]]; then
    echo " ‚ú® G·ª£i √Ω: C√≥ l·ªói c√∫ ph√°p s·ªõm nh·∫•t (c√≥ th·ªÉ g√¢y ra c√°c l·ªói kh√°c):"
    echo " => $first_syntax_err"
    echo ""
  fi


  if grep -q "Error" "$log_file"; then
    echo "‚ùå L·ªói trong: $SRC"
    cat "$log_file"
  elif grep -q "Warning" "$log_file"; then
    echo "‚ö†Ô∏è  C·∫£nh b√°o trong: $SRC"
    cat "$log_file"
  else
    echo " OK: $SRC"
  fi


# N·∫øu l√† th∆∞ m·ª•c
elif [[ -d "$SRC" ]]; then
  for file in $(find "$SRC" -type f -name "*.v"); do
    base=$(basename "$file")
    log_file="$LOG_DIR/${base%.v}.log"


    echo " ƒêang ph√¢n t√≠ch: $file"
    verilator --lint-only -Wall -Wno-fatal "$file" > "$log_file" 2>&1


    if grep -q "Error-NEEDTIMINGOPT" "$log_file"; then
      echo "‚ö†Ô∏è  B·ªè qua file v√¨ c√≥ delay Verilator kh√¥ng h·ªó tr·ª£ (NEEDTIMINGOPT): $file"
      echo " B·ªè qua (delay): $file" >> "$SUMMARY"
      continue
    fi


    if grep -q "Error" "$log_file"; then
      echo "‚ùå L·ªói: $file" >> "$SUMMARY"
      echo "   ‚Ä¢ $file" >> "$TMP_ERR_LIST"
      cat "$log_file" >> "$SUMMARY"
      echo "" >> "$SUMMARY"


    elif grep -q "Warning" "$log_file"; then
      echo "‚ö†Ô∏è  C·∫£nh b√°o: $file" >> "$SUMMARY"
      cat "$log_file" >> "$SUMMARY"
      echo "" >> "$SUMMARY"


    else
      echo " OK: $file" >> "$SUMMARY"
    fi
  done


  echo ""
  echo " T·ªïng h·ª£p k·∫øt qu·∫£ t·∫°i: $SUMMARY"


  if [ -s "$TMP_ERR_LIST" ]; then
    echo "‚ùå C√°c file g·∫∑p l·ªói:"
    cat "$TMP_ERR_LIST" | sed 's/^/    /'
  else
    echo "‚úÖ Kh√¥ng ph√°t hi·ªán l·ªói n√†o."
  fi


  rm -f "$TMP_ERR_LIST"


else
  echo "‚ùå Kh√¥ng t√¨m th·∫•y file ho·∫∑c th∆∞ m·ª•c: $SRC"
  exit 1
fi
